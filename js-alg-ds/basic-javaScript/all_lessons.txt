Start




	comment-your-javascript-code.txt

// This just a comment

/* this is a 
multi-line comment */




	storing-values-with-the-assignment-operator.txt

// Setup
var a;
var b = 2;

// Only change code below this line
var a = 7;
var b = a;




	initializing-variables-with-the-assignment-operator.txt

// Example
var ourVar = 19;

// Only change code below this line
var a = 9;




	understanding-uninitialized-variables.txt

// Initialize these three variables
var a;
var b;
var c;

var a = 5;
var b = 10;
var c = "I am a"

// Do not change code below this line

a = a + 1;
b = b + 5;
c = c + " String!";





	understanding-case-sensitivity-in-variables.txt

// Declarations
var studlyCapVar;
var properCamelCase;
var titleCaseOver;

// Assignments
studlyCapVar = 10;
properCamelCase = "A String";
titleCaseOver = 9000;





	add-two-numbers-with-javascript.txt

var sum = 10 + 10;





	add-two-numbers-with-javascript(1).txt

var sum = 10 + 10;





	subtract-one-number-from-another-with-javascript.txt

var difference = 45 - 33;





	multiply-two-numbers-with-javascript.txt

var product = 8 * 10;





	divide-one-number-by-another-with-javascript.txt

var quotient = 66 / 33;





	increment-a-number-with-javascript.txt

var myVar = 87;

// Only change code below this line
myVar++;





	decrement-a-number-with-javascript.txt

var myVar = 11;

// Only change code below this line
myVar--;





	create-decimal-numbers-with-javascript.txt

var ourDecimal = 5.7;
var myDecimal = 5.7;

// Only change code below this line





	multiply-two-decimals-with-javascript.txt

var product = 2.0 * 2.5;





	divide-one-decimal-by-another-with-javascript.txt

var quotient = 4.4 / 2; // Fix this line





	finding-a-remainder-in-javascript.txt

// Only change code below this line

var remainder;

remainder = 11%3;




	compound-assignment-with-augmented-addition.txt

var a = 3;
var b = 17;
var c = 12;

// Only modify code below this line

a += 12;
b += 9;
c += 7;





	compound-assignment-with-augmented-subtraction.txt

var a = 11;
var b = 9;
var c = 3;

// Only modify code below this line

a -= 6;
b -= 15;
c -= 1;





	compound-assignment-with-augmented-division.txt

var a = 48;
var b = 108;
var c = 33;

// Only modify code below this line

a /= 12;
b /= 4;
c /= 11;





	declare-string-variables.txt

// Example
var firstName = "Alan";
var lastName = "Turing";

// Only change code below this line
var myFirstName = "Will";
var myLastName = "Morgan";




	escaping-literal-quotes-in-strings.txt

var myStr = "I am a \"double quoted\" string inside \"double quotes\"."; // Change this line





	quoting-strings-with-single-quotes.txt

var myStr = '<a href="http://www.example.com" target="_blank">Link</a>';





	escape-sequences-in-strings.txt

var myStr; // Change this line
myStr = 'FirstLine\n\t\\SecondLine\nThirdLine'




	concatenating-strings-with-plus-operator.txt

// Example
var ourStr = "I come first. " + "I come second.";

// Only change code below this line

var myStr;
myStr = 'This is the start.'+' This is the end.'





	concatenating-strings-with-the-plus-equals-operator.txt

// Example
var ourStr = "I come first. ";
ourStr += "I come second.";

// Only change code below this line

var myStr;
myStr = 'This is the first sentence.';
myStr += ' This is the second sentence.';





	constructing-strings-with-variables.txt

// Example
var ourName = "freeCodeCamp";
var ourStr = "Hello, our name is " + ourName + ", how are you?";

// Only change code below this line
var myName;
var myStr;
myName = 'Will';
myStr = 'My name is '+myName+' and I am well!';





	appending-variables-to-strings.txt

// Example
var anAdjective = "awesome!";
var ourStr = "freeCodeCamp is ";
ourStr += anAdjective;

// Only change code below this line

var someAdjective = 'Lucrative';
var myStr = "Learning to code is ";
myStr += someAdjective




	find-the-length-of-a-string.txt

// Example
var firstNameLength = 0;
var firstName = "Ada";

firstNameLength = firstName.length;

// Setup
var lastNameLength = 0;
var lastName = "Lovelace";

// Only change code below this line.

lastNameLength = lastName.length;





	use-bracket-notation-to-find-the-first-character-in-a-string.txt

// Example
var firstLetterOfFirstName = "";
var firstName = "Ada";

firstLetterOfFirstName = firstName[0];

// Setup
var firstLetterOfLastName = "";
var lastName = "Lovelace";

// Only change code below this line
firstLetterOfLastName = lastName[0];





	understand-string-immutability.txt

// Setup
var myStr = "Jello World";

// Only change code below this line

myStr = "Hello World"; // Fix Me





	use-bracket-notation-to-find-the-nth-character-in-a-string.txt

// Example
var firstName = "Ada";
var secondLetterOfFirstName = firstName[1];

// Setup
var lastName = "Lovelace";

// Only change code below this line.
var thirdLetterOfLastName = lastName[2];





	use-bracket-notation-to-find-the-last-character-in-a-string.txt

// Example
var firstName = "Ada";
var lastLetterOfFirstName = firstName[firstName.length - 1];

// Setup
var lastName = "Lovelace";

// Only change code below this line.
var lastLetterOfLastName = lastName[lastName.length -1];





	use-bracket-notation-to-find-the-nth-to-last-character-in-a-string.txt

// Example
var firstName = "Ada";
var thirdToLastLetterOfFirstName = firstName[firstName.length - 3];

// Setup
var lastName = "Lovelace";

// Only change code below this line
var secondToLastLetterOfLastName = lastName[lastName.length -2];





	word-blanks.txt

var myNoun = "dog";
var myAdjective = "big";
var myVerb = "ran";
var myAdverb = "quickly";

var wordBlanks = "The "+ myAdjective+" "+myNoun+' '+myVerb+' too '+myAdverb; // Only change this line;





	store-multiple-values-in-one-variable-using-javascript-arrays.txt

// Example
var ourArray = ["John", 23];

// Only change code below this line.
var myArray = ['john',99];





	nest-one-array-within-another-array.txt

// Example
var ourArray = [["the universe", 42], ["everything", 101010]];

// Only change code below this line.
var myArray = [['seahawks',11],['49ers',13]];





	access-array-data-with-indexes.txt

// Example
var ourArray = [50,60,70];
var ourData = ourArray[0]; // equals 50

// Setup
var myArray = [50,60,70];

// Only change code below this line.
var myData = myArray[0];




	modify-array-data-with-indexes.txt

// Example
var ourArray = [18,64,99];
ourArray[1] = 45; // ourArray now equals [18,45,99].

// Setup
var myArray = [18,64,99];

// Only change code below this line.
myArray[0] = 45




	access-multi-dimensional-arrays-with-indexes.txt

// Setup
var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];

// Only change code below this line.
var myData = myArray[2][1];





	manipulate-arrays-with-push.txt

// Example
var ourArray = ["Stimpson", "J", "cat"];
ourArray.push(["happy", "joy"]);
// ourArray now equals ["Stimpson", "J", "cat", ["happy", "joy"]]

// Setup
var myArray = [["John", 23], ["cat", 2]];

// Only change code below this line.
myArray.push(["dog",3])




	manipulate-arrays-with-pop.txt

// Example
var ourArray = [1,2,3];
var removedFromOurArray = ourArray.pop();
// removedFromOurArray now equals 3, and ourArray now equals [1,2]

// Setup
var myArray = [["John", 23], ["cat", 2]];

// Only change code below this line.
var removedFromMyArray;
removedFromMyArray = myArray.pop();




	manipulate-arrays-with-shift.txt

// Example
var ourArray = ["Stimpson", "J", ["cat"]];
var removedFromOurArray = ourArray.shift();
// removedFromOurArray now equals "Stimpson" and ourArray now equals ["J", ["cat"]].

// Setup
var myArray = [["John", 23], ["dog", 3]];

// Only change code below this line.
var removedFromMyArray;
removedFromMyArray = myArray.shift()




	shopping-list.txt

var myList = [];
myList = [['money',9999999],['more money',999999],['guess?',99999],['yup',99999],['its money',9999999999]]




	write-reusable-javascript-with-functions.txt

// Example
function ourReusableFunction() {
  console.log("Heyya, World");
}

ourReusableFunction();

// Only change code below this line
function reusableFunction(){
  console.log('Hi World');
}
reusableFunction()





	global-scope-and-functions.txt

// Declare your variable here
var myGlobal = 10;

function fun1() {
  // Assign 5 to oopsGlobal Here
  oopsGlobal = 5
}

// Only change code above this line
function fun2() {
  var output = "";
  if (typeof myGlobal != "undefined") {
    output += "myGlobal: " + myGlobal;
  }
  if (typeof oopsGlobal != "undefined") {
    output += " oopsGlobal: " + oopsGlobal;
  }
  console.log(output);
}





	local-scope-and-functions.txt

function myLocalScope() {
  'use strict'; // you shouldn't need to edit this line
  var myVar = 'Will'
  console.log(myVar);
}
myLocalScope();

// Run and check the console
// myVar is not defined outside of myLocalScope


// Now remove the console log line to pass the test





	local-scope-and-functions(1).txt

function myLocalScope() {
  'use strict'; // you shouldn't need to edit this line
  var myVar = 'Will'
  console.log(myVar);
}
myLocalScope();

// Run and check the console
// myVar is not defined outside of myLocalScope


// Now remove the console log line to pass the test





	global-vs.-local-scope-in-functions.txt

// Setup
var outerWear = "T-Shirt";

function myOutfit() {
  // Only change code below this line

    var outerWear = 'sweater'

  // Only change code above this line
  return outerWear;
}

myOutfit();





	return-a-value-from-a-function-with-return.txt

// Example
function minusSeven(num) {
  return num - 7;
}

// Only change code below this line

console.log(minusSeven(10));

function timesFive(int) {
  return int*5;
}

console.log(timesFive(minusSeven(10)))




	understanding-undefined-value-returned-from-a-function.txt

// Example
var sum = 0;
function addThree() {
  sum = sum + 3;
}

// Only change code below this line
function addFive(){
  sum += 5;
}
// Only change code above this line
addThree();
addFive();





	assignment-with-a-returned-value.txt

// Example
var changed = 0;

function change(num) {
  return (num + 5) / 3;
}

changed = change(10);

// Setup
var processed = 0;

function processArg(num) {
  return (num + 3) / 5;
}

// Only change code below this line
processed = processArg(7);




	stand-in-line.txt

function nextInLine(arr, item) {
  arr.push(item)
  var dequed = arr.shift()
  return dequed;  // Change this line
}

// Test Setup
var testArr = [1,2,3,4,5];

// Display Code
console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6)); // Modify this line to test
console.log("After: " + JSON.stringify(testArr));





	understanding-boolean-values.txt

function welcomeToBooleans() {

  // Only change code below this line.

  return true; // Change this line

  // Only change code above this line.
}





	use-conditional-logic-with-if-statements.txt

// Example
function ourTrueOrFalse(isItTrue) {
  if (isItTrue) {
    return "Yes, it's true";
  }
  return "No, it's false";
}

// Setup
function trueOrFalse(wasThatTrue) {

  // Only change code below this line.
  if (wasThatTrue){
    return "Yes, that was true"
  }
  return "No, that was false"

  // Only change code above this line.

}

// Change this value to test
trueOrFalse(true);





	comparison-with-the-equality-operator.txt

// Setup
function testEqual(val) {
  if (val == 12) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

// Change this value to test
testEqual(12);





	comparison-with-the-strict-equality-operator.txt

// Setup
function testStrict(val) {
  if (val===7) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

// Change this value to test
testStrict(7);





	practice-comparing-different-values.txt

// Setup
function compareEquality(a, b) {
  if (a === b) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

// Change this value to test
compareEquality(10, 10);





	comparison-with-the-inequality-operator.txt

// Setup
function testNotEqual(val) {
  if (val != 99) { // Change this line
    return "Not Equal";
  }
  return "Equal";
}

// Change this value to test
testNotEqual(10);





	comparison-with-the-strict-inequality-operator.txt

// Setup
function testStrictNotEqual(val) {
  if (val !== 17) { // Change this line
    return "Not Equal";
  }
  return "Equal";
}

// Change this value to test
testStrictNotEqual(10);





	comparison-with-the-greater-than-operator.txt

function testGreaterThan(val) {
  if (val > 100) {  // Change this line
    return "Over 100";
  }

  if (val > 10) {  // Change this line
    return "Over 10";
  }

  return "10 or Under";
}

// Change this value to test
testGreaterThan(10);





	comparison-with-the-greater-than-or-equal-to-operator.txt

function testGreaterOrEqual(val) {
  if (val >= 20) {  // Change this line
    return "20 or Over";
  }

  if (val >= 10) {  // Change this line
    return "10 or Over";
  }

  return "Less than 10";
}

// Change this value to test
testGreaterOrEqual(10);





	comparison-with-the-less-than-operator.txt

function testLessThan(val) {
  if (val < 25) {  // Change this line
    return "Under 25";
  }

  if (val < 55) {  // Change this line
    return "Under 55";
  }

  return "55 or Over";
}

// Change this value to test
testLessThan(56);





	comparison-with-the-less-than-or-equal-to-operator.txt

function testLessOrEqual(val) {
  if (val <= 12) {  // Change this line
    return "Smaller Than or Equal to 12";
  }

  if (val <= 24) {  // Change this line
    return "Smaller Than or Equal to 24";
  }

  return "More Than 24";
}

// Change this value to test
testLessOrEqual(16);





	comparisons-with-the-logical-and-operator.txt

function testLogicalAnd(val) {
  // Only change code below this line

  if (val <= 50 && val >= 25) {

      return "Yes";

  }

  // Only change code above this line
  return "No";
}

// Change this value to test
testLogicalAnd(10);





	comparisons-with-the-logical-or-operator.txt

function testLogicalOr(val) {
  // Only change code below this line

  if (val < 10 || val > 20) {
    return "Outside";
  }

  // Only change code above this line
  return "Inside";
}

// Change this value to test
testLogicalOr(15);





	introducing-else-statements.txt

function testElse(val) {
  var result = "";
  // Only change code below this line

  if (val > 5) {
    result = "Bigger than 5";
  }else {
    result = "5 or Smaller"
  }

  // Only change code above this line
  return result;
}

// Change this value to test
testElse(4);





	introducing-else-if-statements.txt

function testElseIf(val) {
  if (val > 10) {
    return "Greater than 10";
  } else if (val < 5) {
    return "Smaller than 5";
  } else{
  return "Between 5 and 10";
  }
}

// Change this value to test
testElseIf(7);





	logical-order-in-if-else-statements.txt

function orderMyLogic(val) {
  if (val < 5) {
    return "Less than 5";
  } else if (val < 10) {
    return "Less than 10";
  } else {
    return "Greater than or equal to 10";
  }
}

// Change this value to test
orderMyLogic(17);





	chaining-if-else-statements.txt

function testSize(num) {
  // Only change code below this line
if (num < 5){
  return "Tiny";
} else if (num < 10){
  return 'Small';
} else if (num < 15){
  return 'Medium';
} else if (num < 20){
  return 'Large';
} else {
  return 'Huge';
}
  // Only change code above this line
}

// Change this value to test
testSize(7);





	golf-code.txt

var names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];
function golfScore(par, strokes) {
  // Only change code below this line
  if (strokes == 1) {
    return "Hole-in-one!";
  } else if (strokes-par <= -2){
    return "Eagle";
  } else if (strokes-par == -1){
    return "Birdie";
  } else if (strokes-par == 0){
    return "Par";
  } else if (strokes-par == 1){
    return "Bogey";
  } else if (strokes-par == 2){
    return "Double Bogey";
  } else {
  return "Go Home!";
  }
  // Only change code above this line
}

// Change these values to test
golfScore(5, 4);





	selecting-from-many-options-with-switch-statements.txt

function caseInSwitch(val) {
  var answer = "";
  // Only change code below this line
  switch(val){
      case 1:
        answer = 'alpha';
        break;
      case 2:
        answer = 'beta';
        break;
      case 3:
        answer = 'gamma';
        break;
      case 4:
        answer = 'delta';
        break;
  }

  // Only change code above this line
  return answer;
}

// Change this value to test
caseInSwitch(1);





	adding-a-default-option-in-switch-statements.txt

function switchOfStuff(val) {
  var answer = "";
  // Only change code below this line
  switch(val){
    case "a":
      answer = 'apple';
      break;
    case 'b':
      answer = 'bird';
      break;
    case 'c':
      answer = 'cat'
      break;
    default:
      answer = 'stuff'
  }
  // Only change code above this line
  return answer;
}

// Change this value to test
switchOfStuff(1);





	multiple-identical-options-in-switch-statements.txt

function sequentialSizes(val) {
  var answer = "";
  // Only change code below this line
  switch(val){
  case 1:
  case 2:
  case 3:
    answer = 'Low';
    break;
  case 4:
  case 5:
  case 6:
   answer = 'Mid';
   break;
  case 7:
  case 8:
  case 9:
    answer = "High"
    break;
  }

  // Only change code above this line
  return answer;
}

// Change this value to test
sequentialSizes(1);





	replacing-if-else-chains-with-switch.txt

function chainToSwitch(val) {
  var answer = "";
  // Only change code below this line

  switch(val) {
    case 'bob':
      answer = "Marley";
      break;
    case 42:
      answer = 'The Answer';
      break;
    case 1:
      answer = "There is no #1";
      break;
   case 99:
      answer = "Missed me by this much!";
      break;
   case 7:
    answer = "Ate Nine";
    break;
  }

  // Only change code above this line
  return answer;
}

// Change this value to test
chainToSwitch(7);





	returning-boolean-values-from-functions.txt

function isLess(a, b) {
  // Fix this code
  {
    return a < b;
  } 
}

// Change these values to test
isLess(10, 15);





	return-early-pattern-for-functions.txt

// Setup
function abTest(a, b) {
  // Only change code below this line
 if (a < 0 || b <0) {
   return undefined
 } else {

  // Only change code above this line

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
 }
}

// Change values below to test your code
abTest(20,-1)




	counting-cards.txt

var count = 0;

function cc(card) {
  // Only change code below this line
  switch(card){
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      count++
      break;
    case 7:
    case 8:
    case 9:
      count = count;
      break
    case 10:
    case 'J':
    case 'Q':
    case 'K':
    case 'A':
      count -= 1
  }
  console.log(count)
  if (count > 0){
    return count + " Bet";
  }else {
  return count + " Hold";
  }
  // Only change code above this line
}

// Add/remove calls to test your function.
// Note: Only the last will display
cc(2); cc(3); cc(7); cc('K'); cc('A');





	build-javascript-objects.txt

// Example
var ourDog = {
  "name": "Camper",
  "legs": 4,
  "tails": 1,
  "friends": ["everything!"]
};

// Only change code below this line.

var myDog = {
  "name": "pooper",
  "legs": 18,
  'tails': 2,
  'friends': ['Me', 'myself', 'Irene']
};





	accessing-object-properties-with-dot-notation.txt

// Setup
var testObj = {
  "hat": "ballcap",
  "shirt": "jersey",
  "shoes": "cleats"
};

// Only change code below this line

var hatValue = testObj.hat;      // Change this line
var shirtValue = testObj.shirt;    // Change this line





	accessing-object-properties-with-bracket-notation.txt

// Setup
var testObj = {
  "an entree": "hamburger",
  "my side": "veggies",
  "the drink": "water"
};

// Only change code below this line

var entreeValue = testObj['an entree'];   // Change this line
var drinkValue = testObj['the drink'];    // Change this line





	accessing-object-properties-with-variables.txt

// Setup
var testObj = {
  12: "Namath",
  16: "Montana",
  19: "Unitas"
};

// Only change code below this line;

var playerNumber = 16;       // Change this Line
var player = testObj[playerNumber];   // Change this Line





	updating-object-properties.txt

// Example
var ourDog = {
  "name": "Camper",
  "legs": 4,
  "tails": 1,
  "friends": ["everything!"]
};

ourDog.name = "Happy Camper";

// Setup
var myDog = {
  "name": "Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

// Only change code below this line.
myDog.name = 'Happy Coder'





	add-new-properties-to-a-javascript-object.txt

// Example
var ourDog = {
  "name": "Camper",
  "legs": 4,
  "tails": 1,
  "friends": ["everything!"]
};

ourDog.bark = "bow-wow";

// Setup
var myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"]
};

// Only change code below this line.
myDog['bark'] = 'woof'




	delete-properties-from-a-javascript-object.txt

// Example
var ourDog = {
  "name": "Camper",
  "legs": 4,
  "tails": 1,
  "friends": ["everything!"],
  "bark": "bow-wow"
};

delete ourDog.bark;

// Setup
var myDog = {
  "name": "Happy Coder",
  "legs": 4,
  "tails": 1,
  "friends": ["freeCodeCamp Campers"],
  "bark": "woof"
};

// Only change code below this line.
delete myDog.tails




	using-objects-for-lookups.txt

// Setup
function phoneticLookup(val) {
  var result = "";

  // Only change code below this line
  var lookup = {
    "alpha":"Adams",
    "bravo":"Boston",
    "charlie":"Chicago",
    "delta":"Denver",
    "echo":"Easy",
    "foxtrot":"Frank"
  }
  result = lookup[val]
  // Only change code above this line
  return result;
}

// Change this value to test
phoneticLookup("charlie");





	testing-objects-for-properties.txt

// Setup
var myObj = {
  gift: "pony",
  pet: "kitten",
  bed: "sleigh"
};

function checkObj(checkProp) {
  // Your Code Here
  var prop = checkProp
  if (myObj.hasOwnProperty(prop)){
    return myObj[checkProp]
  }
  return "Not Found";
}

// Test your code by modifying these values
checkObj("gift");





	manipulating-complex-objects.txt

var myMusic = [
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [
      "CD",
      "8T",
      "LP"
    ],
    "gold": true
  },
  // Add record here
  {
    "artist": "Billy Joel",
    "title": "Piano Man",
    "release_year": 1973,
    "formats": [
      "CD",
      "8T",
      "LP"
    ],
    "gold": true
  }
];





	accessing-nested-objects.txt

// Setup
var myStorage = {
  "car": {
    "inside": {
      "glove box": "maps",
      "passenger seat": "crumbs"
     },
    "outside": {
      "trunk": "jack"
    }
  }
};

var gloveBoxContents = myStorage.car.inside['glove box']; // Change this line





	accessing-nested-arrays.txt

// Setup
var myPlants = [
  {
    type: "flowers",
    list: [
      "rose",
      "tulip",
      "dandelion"
    ]
  },
  {
    type: "trees",
    list: [
      "fir",
      "pine",
      "birch"
    ]
  }
];

// Only change code below this line

var secondTree = myPlants[1].list[1]; // Change this line





	record-collection.txt

// Setup
var collection = {
  2548: {
    album: "Slippery When Wet",
    artist: "Bon Jovi",
    tracks: [
      "Let It Rock",
      "You Give Love a Bad Name"
    ]
  },
  2468: {
    album: "1999",
    artist: "Prince",
    tracks: [
      "1999",
      "Little Red Corvette"
    ]
  },
  1245: {
    artist: "Robert Palmer",
    tracks: [ ]
  },
  5439: {
    album: "ABBA Gold"
  }
};

// Only change code below this line
function updateRecords(id, prop, value) {
  console.log(prop)
  if (value == ""){
    delete collection[id][prop]
  }
  else if (prop == 'tracks' && collection[id].hasOwnProperty('tracks')){
    collection[id]['tracks'].push(value)
  }else if (prop == 'tracks'){
    collection[id]['tracks'] = [value]
  }else {
  collection[id][prop] = value;
}
  return collection;
}

// Alter values below to test your code
updateRecords(5439, 'tracks', "not this");





	iterate-with-javascript-while-loops.txt

// Setup
var myArray = [];

// Only change code below this line.
var i = 5;
while(i>=0){
    myArray.push(i)
    i -= 1;
}




	iterate-with-javascript-for-loops.txt

// Example
var ourArray = [];

for (var i = 0; i < 5; i++) {
  ourArray.push(i);
}

// Setup
var myArray = [];

// Only change code below this line.
for (var i = 1; i<=5; i++) {
  myArray.push(i)
}
console.log(myArray)




	iterate-odd-numbers-with-a-for-loop.txt

// Example
var ourArray = [];

for (var i = 0; i < 10; i += 2) {
  ourArray.push(i);
}

// Setup
var myArray = [];

// Only change code below this line.
for (var i = 1; i < 10; i+=2){
  myArray.push(i)
}
console.log(myArray)




	count-backwards-with-a-for-loop.txt

// Example
var ourArray = [];

for (var i = 10; i > 0; i -= 2) {
  ourArray.push(i);
}

// Setup
var myArray = [];

// Only change code below this line.
for (var i = 9; i>0;i-=2){
  myArray.push(i)
}
console.log(myArray)




	iterate-through-an-array-with-a-for-loop.txt

// Example
var ourArr = [ 9, 10, 11, 12];
var ourTotal = 0;

for (var i = 0; i < ourArr.length; i++) {
  ourTotal += ourArr[i];
}

// Setup
var myArr = [ 2, 3, 4, 5, 6];

// Only change code below this line
var total = 0

for (var i = 0; i < myArr.length;i++){
  total += myArr[i];
}
console.log(total)




	nesting-for-loops.txt

function multiplyAll(arr) {
  var product = 1;
  // Only change code below this line
  for (var i=0; i<arr.length;i++){
    for (var j=0;j<arr[i].length;j++){
      product *= arr[i][j]
    }
  }
  // Only change code above this line
  return product;
}

// Modify values below to test your code
multiplyAll([[1,2],[3,4],[5,6,7]]);





	iterate-with-javascript-do...while-loops.txt

// Setup
var myArray = [];
var i = 10;

// Only change code below this line
do {
  myArray.push(i);
  i++;
}while (i < 5);







	replace-loops-using-recursion.txt

function sum(arr, n) {
  // Only change code below this line
  if (n <= 0){
    return arr[0]
  }else{
    return sum(arr, n-1) + arr[n]
  }
  // Only change code above this line
}





	profile-lookup.txt

//Setup
var contacts = [
    {
        "firstName": "Akira",
        "lastName": "Laine",
        "number": "0543236543",
        "likes": ["Pizza", "Coding", "Brownie Points"]
    },
    {
        "firstName": "Harry",
        "lastName": "Potter",
        "number": "0994372684",
        "likes": ["Hogwarts", "Magic", "Hagrid"]
    },
    {
        "firstName": "Sherlock",
        "lastName": "Holmes",
        "number": "0487345643",
        "likes": ["Intriguing Cases", "Violin"]
    },
    {
        "firstName": "Kristian",
        "lastName": "Vos",
        "number": "unknown",
        "likes": ["JavaScript", "Gaming", "Foxes"]
    }
];


function lookUpProfile(name, prop){
// Only change code below this line
    var res = 'No such contact'
    for (var i=0;i<contacts.length;i++){
        if (contacts[i]['firstName'] == name){
            if (contacts[i].hasOwnProperty(prop)){ 
                res = contacts[i][prop];
            }else { 
                return 'No such property'}
            }
        }
    return res
// Only change code above this line
}

// Change these values to test your function
lookUpProfile("Harry", "number");




	generate-random-fractions-with-javascript.txt

function randomFraction() {

  // Only change code below this line.

  return Math.random();

  // Only change code above this line.
}





	generate-random-whole-numbers-with-javascript.txt

var randomNumberBetween0and19 = Math.floor(Math.random() * 20);

function randomWholeNum() {

  // Only change code below this line.

  return Math.floor(Math.random()*10);
}





	generate-random-whole-numbers-within-a-range.txt

// Example
function ourRandomRange(ourMin, ourMax) {

  return Math.floor(Math.random() * (ourMax - ourMin + 1)) + ourMin;
}

ourRandomRange(1, 9);

// Only change code below this line.

function randomRange(myMin, myMax) {

  return Math.floor(Math.random() * (myMax-myMin+1)+myMin); // Change this line

}

// Change these values to test your function
var myRandom = randomRange(5, 15);
console.log(ourRandomRange)
console.log(myRandom)




	use-the-parseint-function.txt

function convertToInteger(str) {
    return parseInt(str)
}

convertToInteger("56");





	use-the-parseint-function-with-a-radix.txt

function convertToInteger(str) {
    return parseInt(str,2)
}

convertToInteger("10011");





	use-the-conditional-ternary-operator.txt

function checkEqual(a, b) {
    return (a==b) ? "Equal":'Not Equal'
}

checkEqual(1, 2);





	use-multiple-conditional-ternary-operators.txt

function checkSign(num) {
    return num>0 ? 'positive'
    : num === 0 ? 'zero'
    : 'negative'
}

checkSign(10);





	use-recursion-to-create-a-countdown.txt

//Only change code below this line
function countdown(n){
  if (n < 1){
    return [];
  }else {
    const countArray = countdown((n-1));
    countArray.unshift(n)
    return countArray;
  }
  
}
console.log(countdown(5)); // [5, 4, 3, 2, 1]





	use-recursion-to-create-a-range-of-numbers.txt

function rangeOfNumbers(startNum, endNum) {
  var n = (endNum - startNum);
  var countArr = []
  function countup(n){
    if (n < 1){
      return [startNum];
    }else {
      const countArr = countup((n-1))
      countArr.push(n+startNum)
      return countArr
    }
  }
  return countup(n);
};



