Start




	comment-your-javascript-code.txt

// This just a comment

/* this is a 
multi-line comment */




	storing-values-with-the-assignment-operator.txt

// Setup
var a;
var b = 2;

// Only change code below this line
var a = 7;
var b = a;




	initializing-variables-with-the-assignment-operator.txt

// Example
var ourVar = 19;

// Only change code below this line
var a = 9;




	understanding-uninitialized-variables.txt

// Initialize these three variables
var a;
var b;
var c;

var a = 5;
var b = 10;
var c = "I am a"

// Do not change code below this line

a = a + 1;
b = b + 5;
c = c + " String!";





	understanding-case-sensitivity-in-variables.txt

// Declarations
var studlyCapVar;
var properCamelCase;
var titleCaseOver;

// Assignments
studlyCapVar = 10;
properCamelCase = "A String";
titleCaseOver = 9000;





	add-two-numbers-with-javascript.txt

var sum = 10 + 10;





	add-two-numbers-with-javascript(1).txt

var sum = 10 + 10;





	subtract-one-number-from-another-with-javascript.txt

var difference = 45 - 33;





	multiply-two-numbers-with-javascript.txt

var product = 8 * 10;





	divide-one-number-by-another-with-javascript.txt

var quotient = 66 / 33;





	increment-a-number-with-javascript.txt

var myVar = 87;

// Only change code below this line
myVar++;





	decrement-a-number-with-javascript.txt

var myVar = 11;

// Only change code below this line
myVar--;





	create-decimal-numbers-with-javascript.txt

var ourDecimal = 5.7;
var myDecimal = 5.7;

// Only change code below this line





	multiply-two-decimals-with-javascript.txt

var product = 2.0 * 2.5;





	divide-one-decimal-by-another-with-javascript.txt

var quotient = 4.4 / 2; // Fix this line





	finding-a-remainder-in-javascript.txt

// Only change code below this line

var remainder;

remainder = 11%3;




	compound-assignment-with-augmented-addition.txt

var a = 3;
var b = 17;
var c = 12;

// Only modify code below this line

a += 12;
b += 9;
c += 7;





	compound-assignment-with-augmented-subtraction.txt

var a = 11;
var b = 9;
var c = 3;

// Only modify code below this line

a -= 6;
b -= 15;
c -= 1;





	compound-assignment-with-augmented-division.txt

var a = 48;
var b = 108;
var c = 33;

// Only modify code below this line

a /= 12;
b /= 4;
c /= 11;





	declare-string-variables.txt

// Example
var firstName = "Alan";
var lastName = "Turing";

// Only change code below this line
var myFirstName = "Will";
var myLastName = "Morgan";




	escaping-literal-quotes-in-strings.txt

var myStr = "I am a \"double quoted\" string inside \"double quotes\"."; // Change this line





	quoting-strings-with-single-quotes.txt

var myStr = '<a href="http://www.example.com" target="_blank">Link</a>';





	escape-sequences-in-strings.txt

var myStr; // Change this line
myStr = 'FirstLine\n\t\\SecondLine\nThirdLine'




	concatenating-strings-with-plus-operator.txt

// Example
var ourStr = "I come first. " + "I come second.";

// Only change code below this line

var myStr;
myStr = 'This is the start.'+' This is the end.'





	concatenating-strings-with-the-plus-equals-operator.txt

// Example
var ourStr = "I come first. ";
ourStr += "I come second.";

// Only change code below this line

var myStr;
myStr = 'This is the first sentence.';
myStr += ' This is the second sentence.';





	constructing-strings-with-variables.txt

// Example
var ourName = "freeCodeCamp";
var ourStr = "Hello, our name is " + ourName + ", how are you?";

// Only change code below this line
var myName;
var myStr;
myName = 'Will';
myStr = 'My name is '+myName+' and I am well!';





	appending-variables-to-strings.txt

// Example
var anAdjective = "awesome!";
var ourStr = "freeCodeCamp is ";
ourStr += anAdjective;

// Only change code below this line

var someAdjective = 'Lucrative';
var myStr = "Learning to code is ";
myStr += someAdjective




	find-the-length-of-a-string.txt

// Example
var firstNameLength = 0;
var firstName = "Ada";

firstNameLength = firstName.length;

// Setup
var lastNameLength = 0;
var lastName = "Lovelace";

// Only change code below this line.

lastNameLength = lastName.length;





	use-bracket-notation-to-find-the-first-character-in-a-string.txt

// Example
var firstLetterOfFirstName = "";
var firstName = "Ada";

firstLetterOfFirstName = firstName[0];

// Setup
var firstLetterOfLastName = "";
var lastName = "Lovelace";

// Only change code below this line
firstLetterOfLastName = lastName[0];





	understand-string-immutability.txt

// Setup
var myStr = "Jello World";

// Only change code below this line

myStr = "Hello World"; // Fix Me





	use-bracket-notation-to-find-the-nth-character-in-a-string.txt

// Example
var firstName = "Ada";
var secondLetterOfFirstName = firstName[1];

// Setup
var lastName = "Lovelace";

// Only change code below this line.
var thirdLetterOfLastName = lastName[2];





	use-bracket-notation-to-find-the-last-character-in-a-string.txt

// Example
var firstName = "Ada";
var lastLetterOfFirstName = firstName[firstName.length - 1];

// Setup
var lastName = "Lovelace";

// Only change code below this line.
var lastLetterOfLastName = lastName[lastName.length -1];





	use-bracket-notation-to-find-the-nth-to-last-character-in-a-string.txt

// Example
var firstName = "Ada";
var thirdToLastLetterOfFirstName = firstName[firstName.length - 3];

// Setup
var lastName = "Lovelace";

// Only change code below this line
var secondToLastLetterOfLastName = lastName[lastName.length -2];





	word-blanks.txt

var myNoun = "dog";
var myAdjective = "big";
var myVerb = "ran";
var myAdverb = "quickly";

var wordBlanks = "The "+ myAdjective+" "+myNoun+' '+myVerb+' too '+myAdverb; // Only change this line;





	store-multiple-values-in-one-variable-using-javascript-arrays.txt

// Example
var ourArray = ["John", 23];

// Only change code below this line.
var myArray = ['john',99];





	nest-one-array-within-another-array.txt

// Example
var ourArray = [["the universe", 42], ["everything", 101010]];

// Only change code below this line.
var myArray = [['seahawks',11],['49ers',13]];





	access-array-data-with-indexes.txt

// Example
var ourArray = [50,60,70];
var ourData = ourArray[0]; // equals 50

// Setup
var myArray = [50,60,70];

// Only change code below this line.
var myData = myArray[0];




	modify-array-data-with-indexes.txt

// Example
var ourArray = [18,64,99];
ourArray[1] = 45; // ourArray now equals [18,45,99].

// Setup
var myArray = [18,64,99];

// Only change code below this line.
myArray[0] = 45




	access-multi-dimensional-arrays-with-indexes.txt

// Setup
var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];

// Only change code below this line.
var myData = myArray[2][1];





	manipulate-arrays-with-push.txt

// Example
var ourArray = ["Stimpson", "J", "cat"];
ourArray.push(["happy", "joy"]);
// ourArray now equals ["Stimpson", "J", "cat", ["happy", "joy"]]

// Setup
var myArray = [["John", 23], ["cat", 2]];

// Only change code below this line.
myArray.push(["dog",3])




	manipulate-arrays-with-pop.txt

// Example
var ourArray = [1,2,3];
var removedFromOurArray = ourArray.pop();
// removedFromOurArray now equals 3, and ourArray now equals [1,2]

// Setup
var myArray = [["John", 23], ["cat", 2]];

// Only change code below this line.
var removedFromMyArray;
removedFromMyArray = myArray.pop();




	manipulate-arrays-with-shift.txt

// Example
var ourArray = ["Stimpson", "J", ["cat"]];
var removedFromOurArray = ourArray.shift();
// removedFromOurArray now equals "Stimpson" and ourArray now equals ["J", ["cat"]].

// Setup
var myArray = [["John", 23], ["dog", 3]];

// Only change code below this line.
var removedFromMyArray;
removedFromMyArray = myArray.shift()




	shopping-list.txt

var myList = [];
myList = [['money',9999999],['more money',999999],['guess?',99999],['yup',99999],['its money',9999999999]]




	write-reusable-javascript-with-functions.txt

// Example
function ourReusableFunction() {
  console.log("Heyya, World");
}

ourReusableFunction();

// Only change code below this line
function reusableFunction(){
  console.log('Hi World');
}
reusableFunction()





	global-scope-and-functions.txt

// Declare your variable here
var myGlobal = 10;

function fun1() {
  // Assign 5 to oopsGlobal Here
  oopsGlobal = 5
}

// Only change code above this line
function fun2() {
  var output = "";
  if (typeof myGlobal != "undefined") {
    output += "myGlobal: " + myGlobal;
  }
  if (typeof oopsGlobal != "undefined") {
    output += " oopsGlobal: " + oopsGlobal;
  }
  console.log(output);
}





	local-scope-and-functions.txt

function myLocalScope() {
  'use strict'; // you shouldn't need to edit this line
  var myVar = 'Will'
  console.log(myVar);
}
myLocalScope();

// Run and check the console
// myVar is not defined outside of myLocalScope


// Now remove the console log line to pass the test





	local-scope-and-functions(1).txt

function myLocalScope() {
  'use strict'; // you shouldn't need to edit this line
  var myVar = 'Will'
  console.log(myVar);
}
myLocalScope();

// Run and check the console
// myVar is not defined outside of myLocalScope


// Now remove the console log line to pass the test





	global-vs.-local-scope-in-functions.txt

// Setup
var outerWear = "T-Shirt";

function myOutfit() {
  // Only change code below this line

    var outerWear = 'sweater'

  // Only change code above this line
  return outerWear;
}

myOutfit();





	return-a-value-from-a-function-with-return.txt

// Example
function minusSeven(num) {
  return num - 7;
}

// Only change code below this line

console.log(minusSeven(10));

function timesFive(int) {
  return int*5;
}

console.log(timesFive(minusSeven(10)))




	understanding-undefined-value-returned-from-a-function.txt

// Example
var sum = 0;
function addThree() {
  sum = sum + 3;
}

// Only change code below this line
function addFive(){
  sum += 5;
}
// Only change code above this line
addThree();
addFive();





	assignment-with-a-returned-value.txt

// Example
var changed = 0;

function change(num) {
  return (num + 5) / 3;
}

changed = change(10);

// Setup
var processed = 0;

function processArg(num) {
  return (num + 3) / 5;
}

// Only change code below this line
processed = processArg(7);




	stand-in-line.txt

function nextInLine(arr, item) {
  arr.push(item)
  var dequed = arr.shift()
  return dequed;  // Change this line
}

// Test Setup
var testArr = [1,2,3,4,5];

// Display Code
console.log("Before: " + JSON.stringify(testArr));
console.log(nextInLine(testArr, 6)); // Modify this line to test
console.log("After: " + JSON.stringify(testArr));





	understanding-boolean-values.txt

function welcomeToBooleans() {

  // Only change code below this line.

  return true; // Change this line

  // Only change code above this line.
}





	use-conditional-logic-with-if-statements.txt

// Example
function ourTrueOrFalse(isItTrue) {
  if (isItTrue) {
    return "Yes, it's true";
  }
  return "No, it's false";
}

// Setup
function trueOrFalse(wasThatTrue) {

  // Only change code below this line.
  if (wasThatTrue){
    return "Yes, that was true"
  }
  return "No, that was false"

  // Only change code above this line.

}

// Change this value to test
trueOrFalse(true);





	comparison-with-the-equality-operator.txt

// Setup
function testEqual(val) {
  if (val == 12) { // Change this line
    return "Equal";
  }
  return "Not Equal";
}

// Change this value to test
testEqual(12);



