Start




	use-a-constructor-to-create-objects.txt

function Dog() {
  this.name = "Rupert";
  this.color = "brown";
  this.numLegs = 4;
}
// Add your code below this line
let hound = new Dog




	extend-constructors-to-receive-arguments.txt

function Dog(name,color) {
this.name = name;
this.color = color;
this.numLegs = 4
}

let terrier = new Dog('toby', 'blue');




	create-a-method-on-an-object.txt

let dog = {
  name: "Spot",
  numLegs: 4,
  sayLegs: function() {return 'This dog has '+dog.numLegs+' legs.'}
};

console.log(dog.sayLegs())





	define-a-constructor-function.txt

function Dog() {
    this.name = 'Polly',
    this.color = 'Green',
    this.numLegs = 3
}




	create-a-basic-javascript-object.txt

let dog = {
    name: "Rory",
    numLegs : 18
};





	use-dot-notation-to-access-the-properties-of-an-object.txt

let dog = {
  name: "Spot",
  numLegs: 4
};
// Add your code below this line
console.log(dog.name,dog.numLegs)




	make-code-more-reusable-with-the-this-keyword.txt

let dog = {
  name: "Spot",
  numLegs: 4,
  sayLegs: function() {return "This dog has " + this.numLegs + " legs.";}
};

dog.sayLegs();





	use-prototype-properties-to-reduce-duplicate-code.txt

function Dog(name) {
  this.name = name;
}



// Add your code above this line
let beagle = new Dog("Snoopy");
Dog.prototype.numLegs = 4




	understand-the-constructor-property.txt

function Dog(name) {
  this.name = name;
}

// Add your code below this line
function joinDogFraternity(candidate) {
if (candidate.constructor === Dog){
  return true;
}else {return false;
}
}





	iterate-over-all-properties.txt

function Dog(name) {
  this.name = name;
}

Dog.prototype.numLegs = 4;

let beagle = new Dog("Snoopy");

let ownProps = [];
let prototypeProps = [];

// Add your code below this line
for (let property in beagle){
  if (beagle.hasOwnProperty(property)){
    ownProps.push(property)
  }else {
    prototypeProps.push(property)
  }
}




	understand-own-properties.txt

function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}

let canary = new Bird("Tweety");
let ownProps = [];
// Add your code below this line
for (let property in canary){
  if (canary.hasOwnProperty(property)){
    ownProps.push(property);
  }
}
console.log(ownProps)




	understand-where-an-objects-prototype-comes-from.txt

function Dog(name) {
  this.name = name;
}

let beagle = new Dog("Snoopy");

// Add your code below this line
Dog.prototype.isPrototypeOf(beagle)




	use-prototype-properties-to-reduce-duplicate-code.txt

function Dog(name) {
  this.name = name;
}



// Add your code above this line
let beagle = new Dog("Snoopy");
Dog.prototype.numLegs = 4




	understand-the-constructor-property.txt

function Dog(name) {
  this.name = name;
}

// Add your code below this line
function joinDogFraternity(candidate) {
if (candidate.constructor === Dog){
  return true;
}else {return false;
}
}





	understand-the-prototype-chain.txt

function Dog(name) {
  this.name = name;
}

let beagle = new Dog("Snoopy");

Dog.prototype.isPrototypeOf(beagle);  // => true

// Fix the code below so that it evaluates to true
Object.prototype.isPrototypeOf(Dog.prototype);





	change-the-prototype-to-a-new-object.txt

function Dog(name) {
  this.name = name;
}

Dog.prototype = {
  // Add your code below this line
numLegs:4,
eat : function(){console.log('nom')},
describe: function() {console.log("my name is"+this.name)}
};





	remember-to-set-the-constructor-property-when-changing-the-prototype.txt

function Dog(name) {
  this.name = name;
}

// Modify the code below this line
Dog.prototype = {
  constructor:Dog,
  numLegs: 4,
  eat: function() {
    console.log("nom nom nom");
  },
  describe: function() {
    console.log("My name is " + this.name);
  }
};





	use-inheritance-so-you-dont-repeat-yourself.txt

function Cat(name) {
  this.name = name;
}

Cat.prototype = {
  constructor: Cat,
};

function Bear(name) {
  this.name = name;
}

Bear.prototype = {
  constructor: Bear,
};

function Animal() { }

Animal.prototype = {
  constructor: Animal,
eat: function(){console.log('nom nom nom')}
};





	iterate-over-all-properties.txt

function Dog(name) {
  this.name = name;
}

Dog.prototype.numLegs = 4;

let beagle = new Dog("Snoopy");

let ownProps = [];
let prototypeProps = [];

// Add your code below this line
for (let property in beagle){
  if (beagle.hasOwnProperty(property)){
    ownProps.push(property)
  }else {
    prototypeProps.push(property)
  }
}




	understand-own-properties.txt

function Bird(name) {
  this.name = name;
  this.numLegs = 2;
}

let canary = new Bird("Tweety");
let ownProps = [];
// Add your code below this line
for (let property in canary){
  if (canary.hasOwnProperty(property)){
    ownProps.push(property);
  }
}
console.log(ownProps)


