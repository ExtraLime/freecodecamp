Start




	sum-all-numbers-in-a-range.txt

function sumAll(arr) {
  let sum = Math.min(...arr);
  for (let i = 1;i<(Math.max(...arr)-Math.min(...arr))+1;i++){
    console.log(i)
    sum += Math.min(...arr)+i
  }
  return sum;
}

console.log(sumAll([4,1]))





	diff-two-arrays.txt

function diffArray(arr1, arr2) {
  var newArr = [];
  var anArr = arr1.concat(arr2);
  for (let i=0;i<anArr.length;i++){
    if (anArr.filter(x => x === anArr[i]).length == 1){
      newArr.push(anArr[i])
    }
  }
  return newArr;
}

console.log(diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]))





	seek-and-destroy.txt

function destroyer(arr) {
  let argIdx = arguments.length;
  for (let i=1;i<argIdx;i++){
    arr = arr.filter(item => item != arguments[i])}
  return arr;
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3);





	wherefore-art-thou.txt

function whatIsInAName(collection, source) {
  // What's in a name?
  var arr = [];
  // Only change code below this line
  for (let item in collection){
    let tempObj = {}
    let c = collection[item];
    for (let key in source){      
      if (c.hasOwnProperty(key)){
        if (c[key]===source[key]){
          tempObj[key] = c[key]
          console.log(tempObj)
        };
        
      }
      if (Object.keys(tempObj).length >= Object.keys(source).length){
        arr.push(collection[item])
      }
    }
  }

  // Only change code above this line
  return arr;
}

console.log(whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" }))





	spinal-tap-case.txt

function spinalCase(str) {
  
  return str.split(/\s|_|(?=[A-Z])/).join('-').toLowerCase();
}

spinalCase('This Is Spinal Tap');





	pig-latin.txt

function translatePigLatin(str) {
let parts = str.split(/([aeiou].+)/).filter(Boolean);
if (str.replace(/[aeiou].+/,'')==str){
  return parts[0]+'ay'}
else if (parts[0] == str){
  return parts[0]+'way'
}
else {return parts[1]+parts[0]+'ay'}
}

console.log(translatePigLatin("eight"))





	search-and-replace.txt

function myReplace(str, before, after) {
  let idx = str.split(' ').indexOf(before)
  console.log(idx)
  if (str.split(' ')[idx][0]==str.split(' ')[idx][0].toUpperCase()){after = after[0].toUpperCase() + after.slice(1)
    return str.replace(before,after)}
    else {return str.replace(before,after)}

  return str;
}

console.log(myReplace("He is Sleeping on the couch", "Sleeping", "sitting"))





	dna-pairing.txt

function pairElement(str) {
  var pairs = []
  let pairObj = {'C':'G',
             'G':'C',
             'A':'T',
             'T':'A'};
    for (var i in str){
      let subArr = []
      subArr.push(str[i])
      subArr.push(pairObj[str[i]])
      pairs.push(subArr)
    }
  return pairs;
}

console.log(pairElement("GCG"))





	missing-letters.txt


function fearNotLetter(str) {
  let alp = 'abcdefghijklmnopqrstuvwxyz'
  let st = alp.indexOf(str[0])
  let end = alp.indexOf(str[str.length-1])
  let cnk = alp.slice(st,end+1).split('')
  if (cnk.filter(function(x){
    return str.indexOf(x) < 0})
    .length>=1){
    return cnk.filter(function(x)
     {return str.indexOf(x) < 0;}).join()
  }else {return undefined}
}

console.log(fearNotLetter("abcdefghik"))





	sorted-union.txt

function uniteUnique(arr) {
  arr = arguments[0]
  for (let i=1;i<arguments.length;i++){
    arr = arr.concat(arguments[i].filter(function(x){return                 arr.indexOf(x) < 0}))
}
  return arr;
}

console.log(uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]))





	convert-html-entities.txt

function convertHTML(str) {
  let rep = {'&':'&amp;',
             '<':'&lt;',
             '>':'&gt;',
             '"':'&quot;',
             "'":'&apos;'}
  for(let i in Object.keys(rep)){
    str = str.split(Object.keys(rep)[i]).join(rep[Object.keys(rep)[i]])
  }
  return str;
}

console.log(convertHTML("Dolce & Gabbana"))





	sum-all-odd-fibonacci-numbers.txt

function sumFibs(num) {
  let fibs = [1,1]
  let lfib = 1   
    while(lfib <= num){
      lfib = fibs[fibs.length-1]+fibs[fibs.length-2]
      if (lfib <= num){
      fibs.push(lfib)}     
    }
  
  return fibs.filter(function(i){return i%2}).reduce(function(a,b){return a+b});
}
console.log(sumFibs(14))





	sum-all-primes.txt


function sumPrimes(num) {
  var primeSum = [2]
  for(var n=3;n<=num;n+=2) {
  if(primeSum.every(function(primeSum){
    return n%primeSum!=0})){
    primeSum.push(n);}}
  return primeSum.reduce(function(a,b){return a+b});
}

console.log(sumPrimes(977))




	smallest-common-multiple.txt

function smallestCommons(arr) {
  let min = Math.min(...arr)
  let max = Math.max(...arr)

  let lcm = max

  for (let i=max-1;i>=min;i--){
    if (lcm%i){lcm+=max;i=max}
  }

  return lcm;
}


smallestCommons([1,5]);





	drop-it.txt

function dropElements(arr, func) {
  // Drop them elements.
  let newArr=[]
  for (let i=0;i<arr.length;i++){
    if (func(arr[i])){
      newArr = arr.slice(i)
      break
    }
  }
  return newArr;
}

console.log(dropElements([0, 1, 0, 1], function(n) {return n === 1;}));





	steamroller.txt

function steamrollArray(arr) {
  
  return arr.flat(Infinity);
}

console.log(steamrollArray([1, [2], [3, [[4]]]]))





	steamroller(1).txt

function steamrollArray(arr) {
  console.log(...arr)
  let stack = [...arr]
  
  let res = []
  
  while (stack.length){
    let item = stack.pop()
    if (Array.isArray(item)){
      stack.push(...item)
      }else {res.push(item)
      }
  }
  return res.reverse();
}

console.log(steamrollArray([1, [2], [3, [[4]]]]))





	binary-agents.txt

function binaryAgent(str) {
  return str.split(" ").map(function(elem){return String.fromCharCode(parseInt(elem,2))}).join('');
}

binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");





	everything-be-true.txt

function truthCheck(collection, pre) {
  // Is everyone being true?
  let status = true
  for (let i in collection){
    if (status == false){return false}
    if (collection[i][pre]){
      status = true
    }else status = false
  }console.log(status)
  return status;
}

console.log(truthCheck([{"user": "Tinky-Winky", "sex": "male"}, {"user": "Dipsy", "sex": "male"}, {"user": "Laa-Laa", "sex": "female"}, {"user": "Po", "sex": "female"}], "sex"))





	arguments-optional.txt

function addTogether() {
  if (arguments.length == 2){
    if (typeof arguments[0] == 'number'){
      if (typeof arguments[1] == 'number'){
        return arguments[0]+arguments[1]
      }
    }    
  } else if ((arguments.length == 1)&&(typeof arguments[0]== 'number')){let x = arguments[0]
    return function add (){
      if (Array.isArray(arguments[0])){return undefined}else
      return x + arguments[0]
    }
  }
  return undefined;
}

console.log(addTogether(2,3))
console.log(addTogether(3)(2))
console.log(addTogether(3,'2'))
console.log(addTogether(2)([3]))





	everything-be-true.txt

function truthCheck(collection, pre) {
  // Is everyone being true?
  let status = true
  for (let i in collection){
    if (status == false){return false}
    if (collection[i][pre]){
      status = true
    }else status = false
  }console.log(status)
  return status;
}

truthCheck([{"user": "Tinky-Winky", "sex": "male"}, {"user": "Dipsy", "sex": "male"}, {"user": "Laa-Laa", "sex": "female"}, {"user": "Po", "sex": "female"}], "sex");





	arguments-optional.txt

function addTogether() {
  if (arguments.length == 2){
    if (typeof arguments[0] == 'number'){
      if (typeof arguments[1] == 'number'){
        return arguments[0]+arguments[1]
      }
    }    
  } else if ((arguments.length == 1)&&(typeof arguments[0]== 'number')){let x = arguments[0]
    return function add (){
      if (Array.isArray(arguments[0])){return undefined}else
      return x + arguments[0]
    }
  }
  return undefined;
}
addTogether(2,3);



