Start




	use-an-array-to-store-a-collection-of-data.txt

let yourArray = [1,'2',false,'money',{more:'money'},['last',5]]





	access-an-arrays-contents-using-bracket-notation.txt

let myArray = ["a", "b", "c", "d"];
// change code below this line
myArray[1] = 'copy cat'
//change code above this line
console.log(myArray);





	add-items-to-an-array-with-push-and-unshift.txt

function mixedNumbers(arr) {
  // change code below this line
    let to_shift = ['I',2,"three"]
    let to_push = [7, "VIII",9]
    for (let i = to_shift.length-1;i>=0;i--){
      arr.unshift(to_shift[i])
    }
    for (let i = 0;i<to_push.length;i++){
      arr.push(to_push[i])
    }
  // change code above this line
  return arr;
}

// do not change code below this line
console.log(mixedNumbers(['IV', 5, 'six']));





	remove-items-from-an-array-with-pop-and-shift.txt

function popShift(arr) {
  let popped = arr.pop(); // change this line
  let shifted = arr.shift(); // change this line
  return [shifted, popped];
}

// do not change code below this line
console.log(popShift(['challenge', 'is', 'not', 'complete']));





	remove-items-using-splice.txt

const arr = [2, 4, 5, 1, 7, 5, 2, 1];
// only change code below this line
arr.splice(1,4)
// only change code above this line
console.log(arr);





	add-items-using-splice.txt

function htmlColorNames(arr) {
  // change code below this line
  arr.splice(0,2,'DarkSalmon','BlanchedAlmond')
  // change code above this line
  return arr;
}

// do not change code below this line
console.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurqoise', 'FireBrick']));





	copy-array-items-using-slice.txt

function forecast(arr) {
  // change code below this line
  let wanted = arr.slice(2,4)
  return wanted;
}

// do not change code below this line
console.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));





	copy-an-array-with-the-spread-operator.txt

function copyMachine(arr, num) {
  let newArr = [];
  while (num >= 1) {
    // change code below this line
    newArr.push([...arr])
    // change code above this line
    num--;
  }
  return newArr;
}

// change code here to test different cases:
console.log(copyMachine([true, false, true], 2));





	combine-arrays-with-the-spread-operator.txt

function spreadOut() {
  let fragment = ['to', 'code'];
  let sentence = ['learning',...fragment,'is','fun'] // change this line
  return sentence;
}

// do not change code below this line
console.log(spreadOut());





	check-for-the-presence-of-an-element-with-indexof.txt

function quickCheck(arr, elem) {
  // change code below this line
if (arr.indexOf(elem) == -1){
  return false
}else {return true}
  // change code above this line
}

// change code here to test different cases:
console.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));





	iterate-through-all-an-arrays-items-using-for-loops.txt

function filteredArray(arr, elem) {
  let newArr = [];
  // change code below this line
  for(let i=0;i<arr.length;i++){
    if (arr[i].indexOf(elem) == -1){
      newArr.push(arr[i])
    }
  }
  // change code above this line
  return newArr;
}

// change code here to test different cases:
console.log(filteredArray([[1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));




	create-complex-multi-dimensional-arrays.txt

let myNestedArray = [
  // change code below this line
  ['unshift', false, 1, 2, 3, 'complex', 'nested'],
  [
    ['loop', 'deep', 6, 7, 1000, ]
  ],
  [
    [
      ['deeper', false, true, 'array']
    ]
  ],
  [
    [
      [
        ['deepest', 1327.98, 'slice', 'push']
      ]
    ]
  ],


  // change code above this line
];





	create-complex-multi-dimensional-arrays(1).txt

let myNestedArray = [
  // change code below this line
  ['unshift', false, 1, 2, 3, 'complex', 'nested'],
  [
    ['loop', 'deep', 6, 7, 1000, ]
  ],
  [
    [
      ['deeper', false, true, 'array']
    ]
  ],
  [
    [
      [
        ['deepest', 1327.98, 'slice', 'push']
      ]
    ]
  ],


  // change code above this line
];





	add-key-value-pairs-to-javascript-objects.txt

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28
};

// change code below this line
foods.bananas = 13
foods.grapes = 35
foods.strawberries = 27
// change code above this line

console.log(foods);





	modify-an-object-nested-within-an-object.txt

let userActivity = {
  id: 23894201352,
  date: 'January 1, 2017',
  data: {
    totalUsers: 51,
    online: 42
  }
};

// change code below this line
userActivity.data.online = 45
// change code above this line

console.log(userActivity);





	access-property-names-with-bracket-notation.txt

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};
// do not change code above this line

function checkInventory(scannedItem) {
  return foods[scannedItem]
  // change code below this line

}

// change code below this line to test different cases:
console.log(checkInventory("apples"));





	use-the-delete-keyword-to-remove-object-properties.txt

let foods = {
  apples: 25,
  oranges: 32,
  plums: 28,
  bananas: 13,
  grapes: 35,
  strawberries: 27
};

// change code below this line
delete foods.plums
delete foods.oranges
delete foods.strawberries
// change code above this line

console.log(foods);





	check-if-an-object-has-a-property.txt

let users = {
  Alan: {
    age: 27,
    online: true
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: true
  },
  Ryan: {
    age: 19,
    online: true
  }
};

function isEveryoneHere(obj) {
  // change code below this line
 let people = ['Alan','Ryan','Sarah','Jeff']
 for (let i=0;i<people.length;i++){
   if (people[i] in users == false){return false}
   }
   return true
  
  
  // change code above this line

}

console.log(isEveryoneHere(users));





	iterate-through-the-keys-of-an-object-with-a-for...in-statement.txt

function countOnline(usersObj) {
  // change code below this line
let count = 0
for (let user in usersObj){  
  console.log(usersObj[user]['online'])
  if (usersObj[user]['online']){
    count += 1
  }
}
return count
  // change code above this line
}





	generate-an-array-of-all-object-keys-with-object.keys.txt

let users = {
  Alan: {
    age: 27,
    online: false
  },
  Jeff: {
    age: 32,
    online: true
  },
  Sarah: {
    age: 48,
    online: false
  },
  Ryan: {
    age: 19,
    online: true
  }
};

function getArrayOfUsers(obj) {
  // change code below this line
  return Object.keys(obj)
  // change code above this line
}

console.log(getArrayOfUsers(users));





	modify-an-array-stored-in-an-object.txt

let user = {
  name: 'Kenneth',
  age: 28,
  data: {
    username: 'kennethCodesAllDay',
    joinDate: 'March 26, 2016',
    organization: 'freeCodeCamp',
    friends: [
      'Sam',
      'Kira',
      'Tomo'
    ],
    location: {
      city: 'San Francisco',
      state: 'CA',
      country: 'USA'
    }
  }
};

function addFriend(userObj, friend) {
  // change code below this line
userObj.data.friends.push(friend)
  // change code above this line
  return userObj.data.friends
}

console.log(addFriend(user, 'Pete'));





	use-the-javascript-console-to-check-the-value-of-a-variable.txt

let a = 5;
let b = 1;
a++;
// Add your code below this line

console.log(a)
let sumAB = a + b;
console.log(sumAB);





	title-case-a-sentence.txt

function titleCase(str) {
  let words = str.split(' ');
  let newStr = '' ;
  for (let word in words){
    let newWord = '';
    newWord += words[word][0].toUpperCase()
    newWord += words[word].slice(1).toLowerCase()
    newStr += newWord
    newStr += ' '
    }
  return newStr.slice(0,newStr.length-1);
}

titleCase("I'm a little tea pot");





	slice-and-splice.txt

function frankenSplice(arr1, arr2, n) {
  let newArr = arr2
  newArr.splice(n,0,...arr1.slice())
  return newArr;
}

console.log(frankenSplice([1, 2, 3], [4, 5, 6], 1))





	falsy-bouncer.txt

function bouncer(arr) {
    return arr.filter(Boolean);
}

bouncer([null, NaN, 1, 2, undefined]);





	where-do-i-belong.txt

function getIndexToIns(arr, num) {
  arr = arr.sort(function(a, b){return a-b})
  if (num > Math.max(...arr)){arr.push(num)}
  console.log(arr)
  if (num in arr){return arr.indexOf(arr[i])-1
  }
  
  for (let i=0;i<arr.length;i++){
    if (num == arr[i]){return arr.indexOf(num)}
    if (num < arr[i]){console.log(i)
      return i
    }
  }
  return 0
  ;
}

getIndexToIns([2, 5, 10], 15);





	mutations.txt

function mutation(arr) {
  let lets = arr[0].toLowerCase().split('')
  let status = true
  for (let i in arr[1]){
  status = lets.includes(arr[1][i].toLowerCase())
  if ((status) == false){return false}
  }console.log(status)
 
  return true;
}

mutation(["hello", "hey"]);




	chunky-monkey.txt

function chunkArrayInGroups(arr, size) {
  let newArr = []
  for (let i=0;i<arr.length;i+=size){
    newArr.push(arr.slice(i,i+size))
  }console.log(newArr)
  return newArr;
}

chunkArrayInGroups(["a", "b", "c", "d"], 2);



