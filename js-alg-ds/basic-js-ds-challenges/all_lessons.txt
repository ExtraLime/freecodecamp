Start




	use-an-array-to-store-a-collection-of-data.txt

let yourArray = [1,'2',false,'money',{more:'money'},['last',5]]





	access-an-arrays-contents-using-bracket-notation.txt

let myArray = ["a", "b", "c", "d"];
// change code below this line
myArray[1] = 'copy cat'
//change code above this line
console.log(myArray);





	add-items-to-an-array-with-push-and-unshift.txt

function mixedNumbers(arr) {
  // change code below this line
    let to_shift = ['I',2,"three"]
    let to_push = [7, "VIII",9]
    for (let i = to_shift.length-1;i>=0;i--){
      arr.unshift(to_shift[i])
    }
    for (let i = 0;i<to_push.length;i++){
      arr.push(to_push[i])
    }
  // change code above this line
  return arr;
}

// do not change code below this line
console.log(mixedNumbers(['IV', 5, 'six']));





	remove-items-from-an-array-with-pop-and-shift.txt

function popShift(arr) {
  let popped = arr.pop(); // change this line
  let shifted = arr.shift(); // change this line
  return [shifted, popped];
}

// do not change code below this line
console.log(popShift(['challenge', 'is', 'not', 'complete']));





	remove-items-using-splice.txt

const arr = [2, 4, 5, 1, 7, 5, 2, 1];
// only change code below this line
arr.splice(1,4)
// only change code above this line
console.log(arr);





	add-items-using-splice.txt

function htmlColorNames(arr) {
  // change code below this line
  arr.splice(0,2,'DarkSalmon','BlanchedAlmond')
  // change code above this line
  return arr;
}

// do not change code below this line
console.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurqoise', 'FireBrick']));





	copy-array-items-using-slice.txt

function forecast(arr) {
  // change code below this line
  let wanted = arr.slice(2,4)
  return wanted;
}

// do not change code below this line
console.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));





	copy-an-array-with-the-spread-operator.txt

function copyMachine(arr, num) {
  let newArr = [];
  while (num >= 1) {
    // change code below this line
    newArr.push([...arr])
    // change code above this line
    num--;
  }
  return newArr;
}

// change code here to test different cases:
console.log(copyMachine([true, false, true], 2));





	combine-arrays-with-the-spread-operator.txt

function spreadOut() {
  let fragment = ['to', 'code'];
  let sentence = ['learning',...fragment,'is','fun'] // change this line
  return sentence;
}

// do not change code below this line
console.log(spreadOut());





	check-for-the-presence-of-an-element-with-indexof.txt

function quickCheck(arr, elem) {
  // change code below this line
if (arr.indexOf(elem) == -1){
  return false
}else {return true}
  // change code above this line
}

// change code here to test different cases:
console.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms'));





	iterate-through-all-an-arrays-items-using-for-loops.txt

function filteredArray(arr, elem) {
  let newArr = [];
  // change code below this line
  for(let i=0;i<arr.length;i++){
    if (arr[i].indexOf(elem) == -1){
      newArr.push(arr[i])
    }
  }
  // change code above this line
  return newArr;
}

// change code here to test different cases:
console.log(filteredArray([[1, 6, 3], [3, 13, 26], [19, 3, 9]], 3));


