Start




	understanding-the-differences-between-the-freecodecamp-and-browser-console.txt

// Open your browser console.
let output = "Get this to log once in the browser console and twice in the freeCodeCamp console";
console.log(output)
// Use console.clear() on the next line to clear the browser console.

console.clear()
// Use console.log() to print the output variable.
console.log(output)

// Check the two consoles to see the difference. The freeCodeCamp console should have printed the variable twice, once for each test of this challenge. The browser console should only print the variable once because you cleared it first.





	use-typeof-to-check-the-type-of-a-variable.txt

let seven = 7;
let three = "3";
console.log(seven + three);
// Add your code below this line
console.log(typeof seven)
console.log(typeof three)




	catch-misspelled-variable-and-function-names.txt

let receivables = 10;
let payables = 8;
let netWorkingCapital = receivables - payables;
console.log(`Net working capital is: ${netWorkingCapital}`);





	catch-unclosed-parentheses-brackets-braces-and-quotes.txt

let myArray = [1, 2, 3];
let arraySum = myArray.reduce((previous, current) =>  previous + current);
console.log(`Sum of array values is: ${arraySum}`);





	catch-mixed-usage-of-single-and-double-quotes.txt

let innerHtml = "<p>Click here to <a href=\"#Home\">return home</a></p>";
console.log(innerHtml);





	catch-use-of-assignment-operator-instead-of-equality-operator.txt

let x = 7;
let y = 9;
let result = "to come";

if(x == y) {
  result = "Equal!";
} else {
  result = "Not equal!";
}

console.log(result);





	catch-missing-open-and-closing-parenthesis-after-a-function-call.txt

function getNine() {
  let x = 6;
  let y = 3;
  return x + y;
}

let result = getNine();
console.log(result);





	catch-arguments-passed-in-the-wrong-order-when-calling-a-function.txt

function raiseToPower(b, e) {
  return Math.pow(b, e);
}

let base = 2;
let exp = 3;
let power = raiseToPower(base,exp);
console.log(power);





	catch-off-by-one-errors-when-using-indexing.txt

function countToFive() {
  let firstFive = "12345";
  let len = firstFive.length;
  // Fix the line below
  for (let i = 0; i < len; i++) {
  // Do not alter code below this line
    console.log(firstFive[i]);
  }
}

countToFive();





	use-caution-when-reinitializing-variables-inside-a-loop.txt

function zeroArray(m, n) {
  // Creates a 2-D array with m rows and n columns of zeroes
  let newArray = [];
  
  for (let i = 0; i < m; i++) {
    // Adds the m-th row into newArray
      let row = [];
    for (let j = 0; j < n; j++) {
      // Pushes n zeroes into the current row to create the columns
      row.push(0);
    }
    // Pushes the current row, which now has n zeroes in it, to the array
    newArray.push(row);
  }
  return newArray;
}

let matrix = zeroArray(3, 2);
console.log(matrix);





	prevent-infinite-loops-with-a-valid-terminal-condition.txt

function myFunc() {
  for (let i = 1; i <= 4; i += 2) {
    console.log("Still going!");
  }
}



